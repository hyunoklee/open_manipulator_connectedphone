#!/usr/bin/env python

import rospy
import rospkg
from math import pow, atan2, sqrt
from tf.transformations import *

import smach
import smach_ros
from smach_ros import SimpleActionState
from smach_ros import ServiceState
from std_msgs.msg import Int8
from std_msgs.msg import String
import threading

# Manipulator 
from open_manipulator_msgs.msg import JointPosition
from open_manipulator_msgs.msg import KinematicsPose
from open_manipulator_msgs.srv import SetJointPosition
from open_manipulator_msgs.srv import SetKinematicsPose
from open_manipulator_msgs.srv import GetJointPosition
from open_manipulator_msgs.srv import GetKinematicsPose

import time
#from darknet_ros_msgs.msg import BoundingBoxes
#from darknet_ros_msgs.msg import BoundingBox
from sensor_msgs.msg import JointState

import tty, sys
import os

class waitCommand(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succeeded','preempted' ,'aborted','option0','option1','option2'])
        self.command_Key_sub = rospy.Subscriber('command_Key', String, self.commandKeyCallback)
        self.mode = 9

    def commandKeyCallback(self, msg):
        #print '0. Start\n1. Stop 1\n2. Release Phone\n' 
        #rospy.logwarn('1commandKeyCallback %d', msg.data) 
        if msg.data == "0" :
            self.mode = 0
        elif msg.data == "1" :   
            self.mode = 1
        elif msg.data == "2" :
            self.mode = 2
        else :
            pass

    def execute(self, userdata):
        self.mode = 9
        #print '0. Start\n1. Stop 1\n2. Release Phone\n'         
        while 1 :
            #rospy.sleep(0.5)
            if self.mode == 0 :
                break
        return 'succeeded'

class trackingAction(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succeeded', 'aborted'],
                                    input_keys=['input_planning_group'])
	self.object_pose_sub = rospy.Subscriber('/facedetectdataset', String, self.collect)
        #self.cupboundingBox = BoundingBox()

        # this is for Joint Control 
        self.set_joint_position = rospy.ServiceProxy('/open_manipulator/goal_joint_space_path', SetJointPosition)
        # this is for IV Kinemetics Control 
        self.set_kinematics_position = rospy.ServiceProxy('/open_manipulator/goal_task_space_path_position_only', SetKinematicsPose)
        # this is for Joint Control from Current Position  
	#self.set_joint_position_from_present = rospy.ServiceProxy('/open_manipulator/goal_joint_space_path_from_present', SetJointPosition)

        # to read current joint value
        self.open_manipulator_joint_states_sub_ = rospy.Subscriber('/open_manipulator/joint_states', JointState, self.jointStatesCallback)
        # to read current IN kinemetics value
        self.open_manipulator_kinematics_pose_sub_ = rospy.Subscriber('/open_manipulator/gripper/kinematics_pose', KinematicsPose, self.kinematicsPoseCallback)

        self.command_Key_sub = rospy.Subscriber('command_Key', String, self.commandKeyCallback)
        self.mode = 9
        self.last_detect_time = rospy.get_rostime()
        self.jointStates = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
	self.kinematicsStates = [0.0, 0.0, 0.0]
        self.facedata = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

    def kinematicsPoseCallback(self, msg):
        self.kinematicsStates[0] = msg.pose.position.x
        self.kinematicsStates[1] = msg.pose.position.y
        self.kinematicsStates[2] = msg.pose.position.z
        #rospy.logwarn(' kinematicsPoseCallback %.2f , %.2f, %.2f  ', self.kinematicsStates[0], self.kinematicsStates[1], self.kinematicsStates[2] )

    def jointStatesCallback(self, msg):
	#rospy.logwarn('jointStatesCallback %d ', len(msg.position) )
        for i, pose in enumerate(msg.position):
            self.jointStates[i] = pose
            #print 'boundingBoxe {} {} '.format(i, pose)

    def collect(self, msg):
        #face tracking data
        #rospy.logwarn('camera data %s', msg.data )
        self.facedata = [int (i) for i in msg.data.split(",")]
        rospy.logwarn('id %d,CX %d,CY %d,Width %d,Height %d,EulerY %d,EulerZ %d,LeftEyeOpen %d,RightEyeOpen %d,Smile %d ', \
                  self.facedata[0], self.facedata[1], self.facedata[2], self.facedata[3], self.facedata[4], self.facedata[5],\
                  self.facedata[6], self.facedata[7], self.facedata[8], self.facedata[9]) 

    def commandKeyCallback(self, msg):
        #print '0. Start\n1. Stop 1\n2. Release Phone\n' 
        #rospy.logwarn('1commandKeyCallback %d', msg.data) 
        if msg.data == "0" :
            self.mode = 0
        elif msg.data == "1" :   
            self.mode = 1
        elif msg.data == "2" :
            self.mode = 2
        elif msg.data == "3" :
            self.mode = 3
        elif msg.data == "7" :
            self.mode = 7
        else :
            pass

    def panoramaShot(self):
        print 'panoramaShot\n' 

    def execute(self, userdata):
        self.mode = 9
        #example joint control 
        '''try: 
	    joint_position = JointPosition()
	    planning_group = userdata.input_planning_group
	    joint_position.joint_name = ['joint1','joint2','joint3','joint4']
            joint_position.position =  [0, 0.055, 0.046, 0]
            path_time = 2
            resp1 = self.set_joint_position(planning_group,joint_position, path_time)
	    #print 'resp1 {}'.format(resp1.is_planned) 
	    rospy.sleep(2) 
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e

        #example IV kinemetics control 
        try: 
	    planning_group = userdata.input_planning_group
            end_effector_name = "gripper";
            kinematics_pose = KinematicsPose()
            kinematics_pose.pose.position.x = self.kinematicsStates[0]
            kinematics_pose.pose.position.y = self.kinematicsStates[1]
            kinematics_pose.pose.position.z = self.kinematicsStates[2] + 0.02

            path_time = 1
            resp1 = self.set_kinematics_position(planning_group, end_effector_name, kinematics_pose, path_time)
	    print 'kinemetics resp1 {}'.format(resp1.is_planned) 
	    rospy.sleep(1) 
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e '''

	while 1:
	    if self.mode == 2 :
	        break
	    elif self.mode == 1 :
	        continue
	    elif self.mode == 3 :
                self.panoramaShot()
	        continue
	    elif self.mode == 7:
                return 'aborted' 	        

            try: 
	        joint_position = JointPosition()
	        planning_group = userdata.input_planning_group
	        joint_position.joint_name = ['joint1','joint2','joint3','joint4']
                joint_position.position =  [0, 0.055, 0.046, 0]
                path_time = 2
                resp1 = self.set_joint_position(planning_group,joint_position, path_time)
	        #print 'resp1 {}'.format(resp1.is_planned) 
	        rospy.sleep(2) 
            except rospy.ServiceException, e:
                print "Service call failed: %s"%e

            try: 
	        planning_group = userdata.input_planning_group
	        joint_position.joint_name = ['joint1','joint2','joint3','joint4']
                joint_position.position =  [0.2, 0.055, 0.07, 0]
                path_time = 2
                resp1 = self.set_joint_position(planning_group,joint_position, path_time)
	        #print 'resp1 {}'.format(resp1.is_planned) 
	        rospy.sleep(2) 
            except rospy.ServiceException, e:
                print "Service call failed: %s"%e
     
	    #rospy.sleep(1) 
            # tracking code 
        return 'succeeded'      

def main():
    rospy.init_node('pick_and_place_state_machine2')
    namespace = rospy.get_param("~robot_name")
    planning_group = rospy.get_param("~planning_group")
    pick_center = smach.StateMachine(outcomes=['succeeded','aborted','preempted','option0','option1','option2'])
   
    rospack = rospkg.RosPack()
    rospack.list() 
    package_path = rospack.get_path('open_manipulator_connectedphone')

    with pick_center:
        pick_center.userdata.planning_group = planning_group

        def joint_position_request_cb(userdata, request):
            request.joint_position.joint_name = ['joint1','joint2','joint3','joint4']
            request.joint_position.position = userdata.input_position
            request.path_time = 1.5
            return request

        def joint_position_response_cb(userdata, response):
            if response.is_planned == False:
                return 'aborted'
            else:
                rospy.sleep(1.5)
                return 'succeeded'

        def gripper_request_cb(userdata, request):
            request.joint_position.joint_name = ['gripper']
            request.joint_position.position = userdata.input_gripper
            request.path_time = 1.5
            return request

        def gripper_response_cb(userdata, response):
            if response.is_planned == False:
                #return 'aborted'
                rospy.sleep(2.0)
                return 'succeeded'
            else:
                rospy.sleep(2.0)
                return 'succeeded'

        ########### INITIAL STEP #################################################        
        pick_center.userdata.init_position = [0.0, -1.05, 0.35, 0.70]
        smach.StateMachine.add('ARM_INIT_POSITION',
                                ServiceState('/open_manipulator/goal_joint_space_path',
                                             SetJointPosition,
                                             request_cb=joint_position_request_cb,
                                             response_cb=joint_position_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_position']),
                                transitions={'succeeded':'INIT_OPEN_GRIPPER'},
                                remapping={'input_planning_group':'planning_group',
                                            'input_position':'init_position'})

        pick_center.userdata.open_gripper = [0.01]
        smach.StateMachine.add('INIT_OPEN_GRIPPER',
                                ServiceState('/open_manipulator/goal_tool_control',
                                             SetJointPosition,
                                             request_cb=gripper_request_cb,
                                             response_cb=gripper_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_gripper']),
                                transitions={'succeeded':'WAIT_COMMAND'},
                                remapping={'input_planning_group':'planning_group',
                                           'input_gripper':'open_gripper'})

        smach.StateMachine.add('WAIT_COMMAND', waitCommand(),
                                transitions={'succeeded':'PICK_FIRST_POSITION',
                                             'aborted':'WAIT_COMMAND'})


        ########## PICKING PHONE STEP ##################################################
        #pick_center.userdata.pick_first_position = [0.0, 0.041, -0.328, 1.743]
        pick_center.userdata.pick_first_position = [0.0, 0.041, -0.328, 1.55]
        smach.StateMachine.add('PICK_FIRST_POSITION',
                                ServiceState('/open_manipulator/goal_joint_space_path',
                                             SetJointPosition,
                                             request_cb=joint_position_request_cb,
                                             response_cb=joint_position_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_position']),
                                transitions={'succeeded':'PICK_SECOND_POSITION'},
                                remapping={'input_planning_group':'planning_group',
                                            'input_position':'pick_first_position'})

        #pick_center.userdata.pick_second_position = [0.0, 0.210, 0.032, 1.330]
        pick_center.userdata.pick_second_position = [0.0, 0.210, 0.032, 1.390]
        smach.StateMachine.add('PICK_SECOND_POSITION',
                                ServiceState('/open_manipulator/goal_joint_space_path',
                                             SetJointPosition,
                                             request_cb=joint_position_request_cb,
                                             response_cb=joint_position_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_position']),
                                transitions={'succeeded':'PICK_GRIPPER_CLOSE'},
                                #transitions={'succeeded':'succeeded'},
                                remapping={'input_planning_group':'planning_group',
                                            'input_position':'pick_second_position'})

        pick_center.userdata.pick_close_gripper = [-0.01]
        smach.StateMachine.add('PICK_GRIPPER_CLOSE',
                                ServiceState('/open_manipulator/goal_tool_control',
                                             SetJointPosition,
                                             request_cb=gripper_request_cb,
                                             response_cb=gripper_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_gripper']),
                                transitions={'succeeded':'PICK_THIRD_POSITION'},
                                remapping={'input_planning_group':'planning_group',
                                           'input_gripper':'pick_close_gripper'})

        pick_center.userdata.pick_third_position = [0.0, -1.05, 0.35, 0.70]
        smach.StateMachine.add('PICK_THIRD_POSITION',
                                ServiceState('/open_manipulator/goal_joint_space_path',
                                             SetJointPosition,
                                             request_cb=joint_position_request_cb,
                                             response_cb=joint_position_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_position']),
                                transitions={'succeeded':'TRACKING_ACTION'},
                                remapping={'input_planning_group':'planning_group',
                                            'input_position':'pick_third_position'})

        ############# TRACKING STEP ###############################################
        smach.StateMachine.add('TRACKING_ACTION', trackingAction(),
                                transitions={'succeeded':'RELEASE_FIRST_POSITION',
                                             'aborted':'aborted'},
                                remapping={'input_planning_group':'planning_group'})

        ############# RELEASE PHONE STEP ###############################################
        smach.StateMachine.add('RELEASE_FIRST_POSITION',
                                ServiceState('/open_manipulator/goal_joint_space_path',
                                             SetJointPosition,
                                             request_cb=joint_position_request_cb,
                                             response_cb=joint_position_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_position']),
                                transitions={'succeeded':'RELEASE_SECOND_POSITION'},
                                remapping={'input_planning_group':'planning_group',
                                            'input_position':'pick_first_position'})

        smach.StateMachine.add('RELEASE_SECOND_POSITION',
                                ServiceState('/open_manipulator/goal_joint_space_path',
                                             SetJointPosition,
                                             request_cb=joint_position_request_cb,
                                             response_cb=joint_position_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_position']),
                                transitions={'succeeded':'RELEASE_OPEN_GRIPPER'},
                                remapping={'input_planning_group':'planning_group',
                                            'input_position':'pick_second_position'})

        smach.StateMachine.add('RELEASE_OPEN_GRIPPER',
                                ServiceState('/open_manipulator/goal_tool_control',
                                             SetJointPosition,
                                             request_cb=gripper_request_cb,
                                             response_cb=gripper_response_cb,
                                             input_keys=['input_planning_group',
                                                         'input_gripper']),
                                transitions={'succeeded':'ARM_INIT_POSITION'},
                                remapping={'input_planning_group':'planning_group',
                                           'input_gripper':'open_gripper'})

    sis = smach_ros.IntrospectionServer('server_name', pick_center, '/PICK_CENTER')
    sis.start()

    # Execute SMACH plan
    outcome = pick_center.execute()

    # Wait for ctrl-c to stop the application
    rospy.spin()
    sis.stop()

if __name__ == '__main__':
    main()
